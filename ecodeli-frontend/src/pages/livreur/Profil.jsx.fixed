import React, { useState, useEffect, useRef } from 'react';
import { toast } from 'react-toastify';
import LivreurService from '../../api/livreur.service';
import useAuthStore from '../../store/authStore';
import { FaUserCircle, FaIdCard, FaFileDownload, FaSpinner } from 'react-icons/fa';

const Profil = () => {
  const { user, setUser } = useAuthStore();
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadingDocument, setUploadingDocument] = useState(false);
  const fileInputRef = useRef(null);
  
  // Formulaire
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    address: '',
    password: '',
    password_confirmation: ''
  });
  
  useEffect(() => {
    fetchProfile();
  }, []);
  
  const fetchProfile = async () => {
    try {
      setIsLoading(true);
      const response = await LivreurService.getProfil();
      
      if (response.data && response.data.success) {
        const profilData = response.data.data;
        setFormData({
          name: profilData.name || '',
          email: profilData.email || '',
          phone: profilData.phone || '',
          address: profilData.address || '',
          password: '',
          password_confirmation: ''
        });
        
        // Mettre à jour les infos utilisateur dans le store
        setUser({
          ...user,
          ...profilData
        });
      } else {
        toast.error("Erreur lors de la récupération du profil");
      }
    } catch (error) {
      console.error('Erreur lors de la récupération du profil:', error);
      toast.error("Erreur lors de la récupération du profil");
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (formData.password && formData.password !== formData.password_confirmation) {
      toast.error("Les mots de passe ne correspondent pas");
      return;
    }
    
    try {
      setIsSubmitting(true);
      const response = await LivreurService.updateProfil(formData);
      
      if (response.data && response.data.success) {
        toast.success("Profil mis à jour avec succès");
        
        // Mise à jour des infos utilisateur dans le store si nécessaire
        if (response.data.data) {
          setUser({
            ...user,
            ...response.data.data
          });
        }
        
        // Réinitialiser les champs de mot de passe
        setFormData({
          ...formData,
          password: '',
          password_confirmation: ''
        });
      } else {
        toast.error(response.data?.message || "Erreur lors de la mise à jour du profil");
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour du profil:', error);
      toast.error("Erreur lors de la mise à jour du profil");
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleDocumentClick = (type) => {
    fileInputRef.current.setAttribute('data-document-type', type);
    fileInputRef.current.click();
  };
  
  const handleDocumentUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    const documentType = fileInputRef.current.getAttribute('data-document-type');
    
    try {
      setUploadingDocument(true);
      const formData = new FormData();
      formData.append('document', file);
      formData.append('document_type', documentType);
      
      const response = await LivreurService.uploadDocument(formData);
      
      if (response.data && response.data.success) {
        toast.success(`Document ${documentType} téléchargé avec succès`);
        fetchProfile(); // Rafraîchir le profil pour avoir les nouveaux statuts
      } else {
        toast.error(response.data?.message || `Erreur lors du téléchargement du document ${documentType}`);
      }
    } catch (error) {
      console.error(`Erreur lors du téléchargement du document ${documentType}:`, error);
      toast.error(`Erreur lors du téléchargement du document ${documentType}`);
    } finally {
      setUploadingDocument(false);
      e.target.value = null; // Réinitialiser l'input file
    }
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">Mon profil</h1>
      
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500"></div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Colonne de gauche: Informations de profil */}
          <div className="md:col-span-2">
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <FaUserCircle className="mr-2" />
                Informations personnelles
              </h2>
              
              <form onSubmit={handleSubmit}>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-gray-700 font-semibold mb-1">
                        Nom complet
                      </label>
                      <input
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        className="w-full border rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-gray-700 font-semibold mb-1">
                        Email
                      </label>
                      <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        className="w-full border rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-gray-700 font-semibold mb-1">
                        Téléphone
                      </label>
                      <input
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleChange}
                        className="w-full border rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-gray-700 font-semibold mb-1">
                        Adresse
                      </label>
                      <input
                        type="text"
                        name="address"
                        value={formData.address}
                        onChange={handleChange}
                        className="w-full border rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-gray-700 font-semibold mb-1">
                        Nouveau mot de passe
                      </label>
                      <input
                        type="password"
                        name="password"
                        value={formData.password}
                        onChange={handleChange}
                        className="w-full border rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                      <p className="text-sm text-gray-500 mt-1">Laissez vide pour ne pas changer</p>
                    </div>
                    
                    <div>
                      <label className="block text-gray-700 font-semibold mb-1">
                        Confirmer mot de passe
                      </label>
                      <input
                        type="password"
                        name="password_confirmation"
                        value={formData.password_confirmation}
                        onChange={handleChange}
                        className="w-full border rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                    </div>
                  </div>
                  
                  <div className="flex justify-end">
                    <button
                      type="submit"
                      disabled={isSubmitting}
                      className="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
                    >
                      {isSubmitting && <FaSpinner className="animate-spin mr-2" />}
                      Sauvegarder
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
          
          {/* Colonne de droite: Documents */}
          <div>
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <FaIdCard className="mr-2" />
                Mes documents
              </h2>
              
              <div className="space-y-4">
                <div className="p-4 border rounded-md">
                  <h3 className="font-semibold mb-2">Pièce d'identité</h3>
                  <div className="flex justify-between items-center">
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${user?.id_verified ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                      {user?.id_verified ? 'Vérifié' : 'En attente'}
                    </span>
                    <button
                      onClick={() => handleDocumentClick('identity')}
                      disabled={uploadingDocument}
                      className="text-green-600 hover:text-green-700 font-semibold text-sm flex items-center focus:outline-none"
                    >
                      <FaFileDownload className="mr-1" />
                      Envoyer
                    </button>
                  </div>
                </div>
                
                <div className="p-4 border rounded-md">
                  <h3 className="font-semibold mb-2">Permis de conduire</h3>
                  <div className="flex justify-between items-center">
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${user?.license_verified ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                      {user?.license_verified ? 'Vérifié' : 'En attente'}
                    </span>
                    <button
                      onClick={() => handleDocumentClick('driving_license')}
                      disabled={uploadingDocument}
                      className="text-green-600 hover:text-green-700 font-semibold text-sm flex items-center focus:outline-none"
                    >
                      <FaFileDownload className="mr-1" />
                      Envoyer
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <input
        type="file"
        ref={fileInputRef}
        accept=".pdf,.jpg,.jpeg,.png"
        onChange={handleDocumentUpload}
        className="hidden"
      />
    </div>
  );
};

export default Profil;
